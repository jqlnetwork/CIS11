 Briefly describe the concept of "Stack Frame" (1 through 5 points depending on quality of the answer)
Hint: https://en.wikipedia.org/wiki/X86_calling_conventions

 Briefly describe the concept of a "Calling Convention" (1 through 5 points depending on quality of the answer)
 Why do the book examples always start functions with "push ebp" and "mov ebp,esp" (2 points)
 What is the x64 equivalent to "push epb" and "mov ebp,esp)" (2 points)
 What are the differences between "Microsoft x64 calling convention" and "System V AMD64 ABI calling convention" (2 points)
Hint: https://en.wikipedia.org/wiki/X86_calling_conventions

void myFunction(int a, int b, int c, int d, int e, int f)  {
  //some code here
}
 Upon entry to myFunction (above), what does the stack look like when using Microsoft x64 calling convention? (3 points)

Hint: https://docs.microsoft.com/en-us/cpp/build/parameter-passing

 Upon entry to myFunction (above), what does the stack look like when using stdcall convention (3 points)

Hint: https://en.wikipedia.org/wiki/X86_calling_conventions

 Upload your assignment to GitHub

 Email james.wilson@rccd.edu with the url to the source code on GitHub

*** 22 points ***


1. The Stack Frame allows variables and parameters, registers, and, return addresses to be saved onto a stack that was set aside specifically for it.
The concept of the Stack Frame is essential because of its ability to manage memory in a sufficient way. It stores the values such as inside the stack using "push". Then, the subroutine is called,
so if the value is in a function, method, depending on your language, it will also push that as well.
As soon as it is completed, the value will be popped out of the stack. It uses a counter to keep track of where it needs to be and will be decremented 
in order to save space. The Stack Frame also has pointers for the base and the top of the stack in addition to keep track.

2. Calling Conventions are basically details on how a proc. are called and how it should be called.
It can gives details about an argument that is being passed by value or reference.
It can also shows how the stack pointer is recovered after a proc. is called, and how the values return back to main from a function.

3. Functions that start with 'push ebp' and 'mov ebp, esp' want to create a base for the stack frame so this is the method they use.
It helps avoid changing offsets of existing stack parameters as well.

4. The x64 equivalent to push ebp and mov ebp, esp are: ENTER.
Also, to pop the stack frame for a procedure, it uses LEAVE.

5. Microsoft64 uses RCX, RDX, R8 and R9 for their first 4 int or ptr arguments, while AMD64 uses RDI, AND RSI in addition to those microsoft registers for their first 6.
Microsoft has a shadow space for the 5th argument as it will be pushed to the top of it, while AMD64 doesn't have this feature.
The AMD64 must restore the original value before returning them to the caller if the following registers are used: RBX, RBP, and R12 through R15.
The caller must save the register in order to keep the value beforehand.
There is a zone that Microsoft64 doesn't have, in the AMD64, that lets local variables get saved onto this space.

6. void myFunction(int a, int b, int c, int d, int e, int f)  {
  //some code here
} Upon entry to myFunction (above), what does the stack look like when using Microsoft x64 calling convention? 

RCX for int a
RDX for int b
R8 for int c
R9 for int d
push int e
push int f

7. void myFunction(int a, int b, int c, int d, int e, int f)  {
  //some code here
} Upon entry to myFunction (above), what does the stack look like when using stdcall convention (3 points)

it gets called in reverse assuming they are on the stack.
int f
int e
int d
int c
int b
int a
